#!/usr/bin/env python
import os

import sanic  # type: ignore
import sanic_cors  # type: ignore
import socketio  # type: ignore

app = sanic.Sanic(__name__)

sanic_cors.CORS(app, resources=r"/socket.io/*", supports_credentials=True)

app.static("/", "web")
app.static("/", "web/index.html")

socketio = socketio.AsyncServer(
    async_mode="sanic", cors_allowed_origins=[], cookie=None
)
socketio.attach(app)


@socketio.on("connect")
async def onconnect(sid, environ):
    await socketio.emit("connect", sid, skip_sid=sid)


@socketio.on("disconnect")
async def ondisconnect(sid):
    await socketio.emit("disconnect", sid, skip_sid=sid)


@socketio.on("message")
async def onmessage(sid, msg):
    await socketio.emit("chatmsg", msg)


def make_room(code):
    async def room(sid, msg: dict):
        await socketio.emit(code, {"from": sid, **msg}, skip_sid=sid)

    return room


for code in ("offer", "answer", "icecandidate", "alpha", "bravo"):
    socketio.on(code, make_room(code))


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=os.environ.get("PORT", 8080))
